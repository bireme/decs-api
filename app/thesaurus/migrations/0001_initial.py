# Generated by Django 3.2 on 2022-10-19 14:57

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import utils.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='code_controller',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sequential_number', models.CharField(max_length=250, verbose_name='Sequential number')),
                ('thesaurus', models.CharField(blank=True, max_length=50, verbose_name='Thesaurus')),
            ],
            options={
                'verbose_name': 'Sequencial control',
                'verbose_name_plural': 'Sequencial controls',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='code_controller_term',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sequential_number', models.CharField(max_length=250, verbose_name='Sequential number')),
                ('thesaurus', models.CharField(blank=True, max_length=50, verbose_name='Thesaurus')),
            ],
            options={
                'verbose_name': 'Sequencial control',
                'verbose_name_plural': 'Sequencial controls',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ConceptListDesc',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language_code', models.CharField(blank=True, choices=[('en', 'English'), ('es', 'Spanish Latin America'), ('pt-br', 'Portuguese'), ('es-es', 'Spanish Spain'), ('fr', 'French')], max_length=10, verbose_name='Language used for description')),
                ('scope_note', models.TextField(blank=True, max_length=1500, verbose_name='Scope note')),
            ],
            options={
                'verbose_name': 'Concept',
                'verbose_name_plural': 'Concepts',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ConceptListQualif',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language_code', models.CharField(blank=True, choices=[('en', 'English'), ('es', 'Spanish Latin America'), ('pt-br', 'Portuguese'), ('es-es', 'Spanish Spain'), ('fr', 'French')], max_length=10, verbose_name='Language used for description')),
                ('scope_note', models.TextField(blank=True, max_length=1500, verbose_name='Scope note')),
            ],
            options={
                'verbose_name': 'Concept',
                'verbose_name_plural': 'Concepts',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DescriptionDesc',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language_code', models.CharField(blank=True, choices=[('en', 'English'), ('es', 'Spanish Latin America'), ('pt-br', 'Portuguese'), ('es-es', 'Spanish Spain'), ('fr', 'French')], max_length=10, verbose_name='Language used for description')),
                ('annotation', models.TextField(blank=True, max_length=1500, verbose_name='Annotation')),
                ('history_note', models.TextField(blank=True, max_length=1500, verbose_name='History note')),
                ('online_note', models.TextField(blank=True, max_length=1500, verbose_name='Online note')),
                ('public_mesh_note', models.TextField(blank=True, max_length=1500, verbose_name='Public MeSH note')),
                ('consider_also', models.CharField(blank=True, max_length=250, verbose_name='Consider also')),
            ],
            options={
                'verbose_name': 'Description',
                'verbose_name_plural': 'Descriptions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DescriptionQualif',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language_code', models.CharField(blank=True, choices=[('en', 'English'), ('es', 'Spanish Latin America'), ('pt-br', 'Portuguese'), ('es-es', 'Spanish Spain'), ('fr', 'French')], max_length=10, verbose_name='Language used for description')),
                ('annotation', models.TextField(blank=True, max_length=1500, verbose_name='Annotation')),
                ('history_note', models.TextField(blank=True, max_length=1500, verbose_name='History note')),
                ('online_note', models.TextField(blank=True, max_length=1500, verbose_name='Online note')),
            ],
            options={
                'verbose_name': 'Description of Qualifier',
                'verbose_name_plural': 'Descriptions of Qualifier',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='EntryCombinationListDesc',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ecin_qualif', models.CharField(blank=True, max_length=250, verbose_name='Qualifier string')),
                ('ecin_id', models.CharField(blank=True, max_length=250, verbose_name='Identifier')),
                ('ecout_desc', models.CharField(blank=True, max_length=250, verbose_name='Descriptor string')),
                ('ecout_desc_id', models.CharField(blank=True, max_length=250, verbose_name='Identifier')),
                ('ecout_qualif', models.CharField(blank=True, max_length=250, verbose_name='Qualifier string')),
                ('ecout_qualif_id', models.CharField(blank=True, max_length=250, verbose_name='Identifier')),
            ],
            options={
                'verbose_name': 'Entry combination List',
                'verbose_name_plural': 'Entry combinations List',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='IdentifierConceptListDesc',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('concept_ui', models.CharField(blank=True, max_length=50, verbose_name='Concept unique Identifier')),
                ('concept_relation_name', models.CharField(blank=True, choices=[('NRW', 'NRW - Narrower'), ('BRD', 'BRD - Broader'), ('REL', 'REL - Related but not broader or narrower')], max_length=3, verbose_name='Relationship')),
                ('preferred_concept', models.CharField(blank=True, choices=[('Y', 'Yes'), ('N', 'No')], max_length=1, verbose_name='Preferred concept')),
                ('casn1_name', models.TextField(blank=True, max_length=1000, verbose_name='Chemical abstract')),
                ('registry_number', models.CharField(blank=True, max_length=250, verbose_name='Registry number from CAS')),
                ('historical_annotation', models.TextField(blank=True, max_length=1500, verbose_name='Historical annotation')),
            ],
            options={
                'verbose_name': 'Concept record',
                'verbose_name_plural': 'Concept records',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='IdentifierConceptListQualif',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('concept_ui', models.CharField(blank=True, max_length=50, verbose_name='Concept unique Identifier')),
                ('concept_relation_name', models.CharField(blank=True, choices=[('NRW', 'NRW - Narrower'), ('BRD', 'BRD - Broader'), ('REL', 'REL - Related but not broader or narrower')], max_length=3, verbose_name='Relationship')),
                ('preferred_concept', models.CharField(blank=True, choices=[('Y', 'Yes'), ('N', 'No')], max_length=1, verbose_name='Preferred concept')),
                ('casn1_name', models.TextField(blank=True, max_length=1000, verbose_name='Chemical abstract')),
                ('registry_number', models.CharField(blank=True, max_length=250, verbose_name='Registry number from CAS')),
                ('historical_annotation', models.TextField(blank=True, max_length=1500, verbose_name='Historical annotation')),
            ],
            options={
                'verbose_name': 'Concept record',
                'verbose_name_plural': 'Concept records',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='IdentifierDesc',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_time', models.DateTimeField(auto_now=True, null=True, verbose_name='updated')),
                ('descriptor_class', models.CharField(blank=True, choices=[('1', '1 - Topical Descriptor'), ('2', '2 - Publication Types, for example Review'), ('3', '3 - Check Tag, e.g., Male - no tree number'), ('4', '4 - Geographic Descriptor')], max_length=2, verbose_name='Descriptor class')),
                ('descriptor_ui', models.CharField(blank=True, max_length=250, verbose_name='Transport UI')),
                ('decs_code', models.CharField(blank=True, max_length=250, verbose_name='Thesaurus UI')),
                ('external_code', models.CharField(blank=True, max_length=250, verbose_name='External Descriptor UI')),
                ('nlm_class_number', models.CharField(blank=True, max_length=250, verbose_name='NLM classification number')),
                ('date_created', models.DateField(blank=True, help_text='DD/MM/YYYY', null=True, verbose_name='Date created')),
                ('date_revised', models.DateField(blank=True, help_text='DD/MM/YYYY', null=True, verbose_name='Date revised')),
                ('date_established', models.DateField(blank=True, help_text='DD/MM/YYYY', null=True, verbose_name='Date established')),
            ],
            options={
                'verbose_name': 'Descriptor',
                'verbose_name_plural': 'Descriptors',
                'ordering': ('decs_code',),
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='IdentifierQualif',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_time', models.DateTimeField(auto_now=True, null=True, verbose_name='updated')),
                ('qualifier_ui', models.CharField(blank=True, max_length=250, verbose_name='Transport UI')),
                ('decs_code', models.CharField(blank=True, max_length=250, verbose_name='Thesaurus UI')),
                ('external_code', models.CharField(blank=True, max_length=250, verbose_name='External Qualifier UI')),
                ('abbreviation', models.CharField(max_length=4, verbose_name='Abbreviation')),
                ('date_created', models.DateField(blank=True, help_text='DD/MM/YYYY', null=True, verbose_name='Date created')),
                ('date_revised', models.DateField(blank=True, help_text='DD/MM/YYYY', null=True, verbose_name='Date revised')),
                ('date_established', models.DateField(blank=True, help_text='DD/MM/YYYY', null=True, verbose_name='Date established')),
            ],
            options={
                'verbose_name': 'Qualifier',
                'verbose_name_plural': 'Qualifiers',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='legacyInformationDesc',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pre_codificado', models.CharField(blank=True, max_length=1, verbose_name='Pre-codificado')),
                ('desastre', models.CharField(blank=True, max_length=1, verbose_name='Desastre')),
                ('reforma_saude', models.CharField(blank=True, max_length=1, verbose_name='Reforma Saude')),
                ('geografico', models.CharField(blank=True, max_length=1, verbose_name='Geografico')),
                ('mesh', models.CharField(blank=True, max_length=1, verbose_name='MeSH')),
                ('pt_lilacs', models.CharField(blank=True, max_length=1, verbose_name='PT LILACS')),
                ('nao_indexavel', models.CharField(blank=True, max_length=1, verbose_name='Nao indexavel')),
                ('homeopatia', models.CharField(blank=True, max_length=1, verbose_name='Homeopatia')),
                ('repidisca', models.CharField(blank=True, max_length=1, verbose_name='Repidisca')),
                ('saude_publica', models.CharField(blank=True, max_length=1, verbose_name='Saude Publica')),
                ('exploded', models.CharField(blank=True, max_length=1, verbose_name='Exploded')),
                ('geog_decs', models.CharField(blank=True, max_length=1, verbose_name='Geog DeCS')),
            ],
            options={
                'verbose_name': 'Legacy information',
                'verbose_name_plural': 'Legacy information',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='legacyInformationQualif',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pre_codificado', models.CharField(blank=True, max_length=1, verbose_name='Pre-codificado')),
                ('desastre', models.CharField(blank=True, max_length=1, verbose_name='Desastre')),
                ('reforma_saude', models.CharField(blank=True, max_length=1, verbose_name='Reforma Saude')),
                ('geografico', models.CharField(blank=True, max_length=1, verbose_name='Geografico')),
                ('mesh', models.CharField(blank=True, max_length=1, verbose_name='MeSH')),
                ('pt_lilacs', models.CharField(blank=True, max_length=1, verbose_name='PT LILACS')),
                ('nao_indexavel', models.CharField(blank=True, max_length=1, verbose_name='Nao indexavel')),
                ('homeopatia', models.CharField(blank=True, max_length=1, verbose_name='Homeopatia')),
                ('repidisca', models.CharField(blank=True, max_length=1, verbose_name='Repidisca')),
                ('saude_publica', models.CharField(blank=True, max_length=1, verbose_name='Saude Publica')),
                ('exploded', models.CharField(blank=True, max_length=1, verbose_name='Exploded')),
                ('geog_decs', models.CharField(blank=True, max_length=1, verbose_name='Geog DeCS')),
            ],
            options={
                'verbose_name': 'Legacy information',
                'verbose_name_plural': 'Legacy information',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PharmacologicalActionList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('term_string', models.CharField(blank=True, max_length=250, verbose_name='String')),
                ('descriptor_ui', models.CharField(blank=True, max_length=250, verbose_name='Transport UI')),
                ('language_code', models.CharField(blank=True, choices=[('en', 'English'), ('es', 'Spanish Latin America'), ('pt-br', 'Portuguese'), ('es-es', 'Spanish Spain'), ('fr', 'French')], max_length=10, verbose_name='Language used for description')),
            ],
            options={
                'verbose_name': 'Pharmacological Action List',
                'verbose_name_plural': 'Pharmacologicals Action List',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PreviousIndexingListDesc',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('previous_indexing', models.CharField(blank=True, max_length=1000, verbose_name='Previous indexing')),
                ('language_code', models.CharField(blank=True, choices=[('en', 'English'), ('es', 'Spanish Latin America'), ('pt-br', 'Portuguese'), ('es-es', 'Spanish Spain'), ('fr', 'French')], max_length=10, verbose_name='Language used for description')),
            ],
            options={
                'verbose_name': 'Previous Indexing',
                'verbose_name_plural': 'Previous Indexing',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SeeRelatedListDesc',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('term_string', models.CharField(blank=True, max_length=250, verbose_name='String')),
                ('descriptor_ui', models.CharField(blank=True, max_length=250, verbose_name='Transport UI')),
            ],
            options={
                'verbose_name': 'See Related List',
                'verbose_name_plural': 'See Related List',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TermListDesc',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.SmallIntegerField(choices=[(-1, 'Draft'), (1, 'Published'), (3, 'Deleted'), (5, 'Historical'), (10, 'Awaiting translation')], default=-1, null=True, verbose_name='Status')),
                ('term_ui', models.CharField(blank=True, max_length=250, verbose_name='Term unique identifier')),
                ('language_code', models.CharField(blank=True, choices=[('en', 'English'), ('es', 'Spanish Latin America'), ('pt-br', 'Portuguese'), ('es-es', 'Spanish Spain'), ('fr', 'French')], max_length=10, verbose_name='Language used for description')),
                ('term_string', models.CharField(max_length=250, verbose_name='String')),
                ('concept_preferred_term', models.CharField(blank=True, choices=[('Y', 'Yes'), ('N', 'No')], max_length=1, verbose_name='Concept preferred term')),
                ('is_permuted_term', models.CharField(blank=True, choices=[('Y', 'Yes'), ('N', 'No')], max_length=1, verbose_name='Is permuted term')),
                ('lexical_tag', models.CharField(blank=True, choices=[('ABB', 'ABB - Abbreviation'), ('ABX', 'ABX - Embedded abbreviation'), ('ACR', 'ACR - Acronym'), ('ACX', 'ACX - Embedded acronym'), ('EPO', 'EPO - Eponym'), ('LAB', 'LAB - Lab number'), ('NAM', 'NAM - Proper name'), ('NON', 'NON - None'), ('TRD', 'TRD - Trade name')], max_length=3, verbose_name='Lexical categories')),
                ('record_preferred_term', models.CharField(blank=True, choices=[('Y', 'Yes'), ('N', 'No')], max_length=1, verbose_name='Record preferred term')),
                ('entry_version', models.CharField(blank=True, max_length=250, verbose_name='Entry version')),
                ('date_created', models.DateField(blank=True, help_text='DD/MM/YYYY', null=True, verbose_name='Date created')),
                ('date_altered', models.DateField(blank=True, help_text='DD/MM/YYYY', null=True, verbose_name='Date altered')),
                ('historical_annotation', models.TextField(blank=True, max_length=1500, verbose_name='Historical annotation')),
                ('term_thesaurus', models.CharField(blank=True, max_length=50, verbose_name='Thesaurus')),
            ],
            options={
                'verbose_name': 'Term',
                'verbose_name_plural': 'Terms',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TermListQualif',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.SmallIntegerField(choices=[(-1, 'Draft'), (1, 'Published'), (3, 'Deleted'), (5, 'Historical'), (10, 'Awaiting translation')], default=-1, null=True, verbose_name='Status')),
                ('language_code', models.CharField(blank=True, choices=[('en', 'English'), ('es', 'Spanish Latin America'), ('pt-br', 'Portuguese'), ('es-es', 'Spanish Spain'), ('fr', 'French')], max_length=10, verbose_name='Language used for description')),
                ('concept_preferred_term', models.CharField(blank=True, choices=[('Y', 'Yes'), ('N', 'No')], max_length=1, verbose_name='Concept preferred term')),
                ('is_permuted_term', models.CharField(blank=True, choices=[('Y', 'Yes'), ('N', 'No')], max_length=1, verbose_name='Is permuted term')),
                ('lexical_tag', models.CharField(blank=True, choices=[('ABB', 'ABB - Abbreviation'), ('ABX', 'ABX - Embedded abbreviation'), ('ACR', 'ACR - Acronym'), ('ACX', 'ACX - Embedded acronym'), ('EPO', 'EPO - Eponym'), ('LAB', 'LAB - Lab number'), ('NAM', 'NAM - Proper name'), ('NON', 'NON - None'), ('TRD', 'TRD - Trade name')], max_length=3, verbose_name='Lexical categories')),
                ('record_preferred_term', models.CharField(blank=True, choices=[('Y', 'Yes'), ('N', 'No')], max_length=1, verbose_name='Record preferred term')),
                ('term_ui', models.CharField(blank=True, max_length=250, verbose_name='Term unique identifier')),
                ('term_string', models.CharField(max_length=250, verbose_name='String')),
                ('entry_version', models.CharField(blank=True, max_length=250, verbose_name='Entry version')),
                ('date_created', models.DateField(blank=True, help_text='DD/MM/YYYY', null=True, verbose_name='Date created')),
                ('date_altered', models.DateField(blank=True, help_text='DD/MM/YYYY', null=True, verbose_name='Date altered')),
                ('historical_annotation', models.TextField(blank=True, max_length=1500, verbose_name='Historical annotation')),
                ('term_thesaurus', models.CharField(blank=True, max_length=50, verbose_name='Thesaurus')),
            ],
            options={
                'verbose_name': 'Term',
                'verbose_name_plural': 'Terms',
                'ordering': ('language_code', 'term_string', 'concept_preferred_term'),
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TheraurusOccurrenceListDesc',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('thesaurus_occurrence', models.CharField(blank=True, max_length=250, verbose_name='Name of a thesaurus where terms occur')),
            ],
            options={
                'verbose_name': 'Thesaurus occurrence',
                'verbose_name_plural': 'Thesaurus occurrence',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Thesaurus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('thesaurus_name', models.CharField(max_length=250, verbose_name='Thesaurus name')),
                ('thesaurus_author', models.CharField(max_length=250, verbose_name='Author')),
                ('thesaurus_scope', models.CharField(max_length=250, verbose_name='Scope')),
                ('thesaurus_acronym', models.CharField(blank=True, max_length=3, verbose_name='Thesaurus acronym')),
            ],
            options={
                'verbose_name': 'Thesaurus',
                'verbose_name_plural': 'Thesaurus',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TreeNumbersListDesc',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tree_number', models.CharField(blank=True, max_length=250, verbose_name='Tree number')),
            ],
            options={
                'verbose_name': 'Tree number for descriptor',
                'verbose_name_plural': 'Tree numbers for descriptors',
                'ordering': ('tree_number',),
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TreeNumbersListQualif',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tree_number', models.CharField(blank=True, max_length=250, verbose_name='Tree number')),
            ],
            options={
                'verbose_name': 'Tree number for qualifier',
                'verbose_name_plural': 'Tree numbers for qualifiers',
                'ordering': ('tree_number',),
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TreeQualifier',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_time', models.DateTimeField(auto_now=True, null=True, verbose_name='updated')),
                ('treeNumber', models.CharField(blank=True, max_length=250, verbose_name='Tree number')),
                ('identifier_id', models.IntegerField(blank=True, null=True, verbose_name='identifier_id')),
                ('ancestor', utils.fields.JSONField(blank=True, dump_kwargs={'ensure_ascii': False}, null=True, verbose_name='Ancestors')),
                ('preceding_sibling', utils.fields.JSONField(blank=True, dump_kwargs={'ensure_ascii': False}, null=True, verbose_name='Preceding Siblings')),
                ('following_sibling', utils.fields.JSONField(blank=True, dump_kwargs={'ensure_ascii': False}, null=True, verbose_name='Following Siblings')),
                ('self_term', utils.fields.JSONField(blank=True, dump_kwargs={'ensure_ascii': False}, null=True, verbose_name='Self')),
                ('descendant', utils.fields.JSONField(blank=True, dump_kwargs={'ensure_ascii': False}, null=True, verbose_name='Descendants')),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Qualifier Full Tree',
                'verbose_name_plural': 'Qualifier Full Trees',
            },
        ),
        migrations.CreateModel(
            name='TreeDescriptor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_time', models.DateTimeField(auto_now=True, null=True, verbose_name='updated')),
                ('treeNumber', models.CharField(blank=True, max_length=250, verbose_name='Tree number')),
                ('identifier_id', models.IntegerField(blank=True, null=True, verbose_name='identifier_id')),
                ('ancestor', utils.fields.JSONField(blank=True, dump_kwargs={'ensure_ascii': False}, null=True, verbose_name='Ancestors')),
                ('preceding_sibling', utils.fields.JSONField(blank=True, dump_kwargs={'ensure_ascii': False}, null=True, verbose_name='Preceding Siblings')),
                ('following_sibling', utils.fields.JSONField(blank=True, dump_kwargs={'ensure_ascii': False}, null=True, verbose_name='Following Siblings')),
                ('self_term', utils.fields.JSONField(blank=True, dump_kwargs={'ensure_ascii': False}, null=True, verbose_name='Self')),
                ('descendant', utils.fields.JSONField(blank=True, dump_kwargs={'ensure_ascii': False}, null=True, verbose_name='Descendants')),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Descriptor Full Tree',
                'verbose_name_plural': 'Descriptor Full Trees',
            },
        ),
        migrations.CreateModel(
            name='Qualifier',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_time', models.DateTimeField(auto_now=True, null=True, verbose_name='updated')),
                ('thesaurus', models.SmallIntegerField(default=None, null=True, verbose_name='Thesaurus')),
                ('decs_code', models.CharField(blank=True, max_length=250, verbose_name='Thesaurus UI')),
                ('identifier', models.CharField(max_length=10, verbose_name='identifier')),
                ('active', models.BooleanField(default=False, verbose_name='Active')),
                ('abbreviation', models.CharField(max_length=4, verbose_name='Abbreviation')),
                ('label', utils.fields.JSONField(blank=True, dump_kwargs={'ensure_ascii': False}, null=True, verbose_name='Label')),
                ('treeNumber', utils.fields.JSONField(blank=True, null=True, verbose_name='Tree Number')),
                ('concept', utils.fields.JSONField(blank=True, null=True, verbose_name='Concept')),
                ('preferredConcept', models.CharField(blank=True, max_length=150, null=True, verbose_name='Preferred Concept')),
                ('preferredTerm', models.CharField(blank=True, max_length=150, null=True, verbose_name='Preferred Term')),
                ('synonym', utils.fields.JSONField(blank=True, dump_kwargs={'ensure_ascii': False}, null=True, verbose_name='Synonym')),
                ('annotation', utils.fields.JSONField(blank=True, dump_kwargs={'ensure_ascii': False}, null=True, verbose_name='Annotation')),
                ('onlineNote', utils.fields.JSONField(blank=True, dump_kwargs={'ensure_ascii': False}, null=True, verbose_name='Online Note')),
                ('historyNote', utils.fields.JSONField(blank=True, dump_kwargs={'ensure_ascii': False}, null=True, verbose_name='History Note')),
                ('scopeNote', utils.fields.JSONField(blank=True, dump_kwargs={'ensure_ascii': False}, null=True, verbose_name='Definition')),
                ('date_created', models.DateField(blank=True, help_text='DD/MM/YYYY', null=True, verbose_name='Date created')),
                ('date_revised', models.DateField(blank=True, help_text='DD/MM/YYYY', null=True, verbose_name='Date revised')),
                ('date_established', models.DateField(blank=True, help_text='DD/MM/YYYY', null=True, verbose_name='Date established')),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Full Qualifier',
                'verbose_name_plural': 'Full Qualifiers',
            },
        ),
        migrations.CreateModel(
            name='FirstLevel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_time', models.DateTimeField(auto_now=True, null=True, verbose_name='updated')),
                ('treeNumber', models.CharField(default=None, max_length=3, null=True, verbose_name='Tree Number')),
                ('type', models.CharField(blank=True, max_length=50, verbose_name='type')),
                ('thesaurus', models.SmallIntegerField(default=None, null=True, verbose_name='Thesaurus')),
                ('decs_code', models.CharField(blank=True, max_length=250, verbose_name='Thesaurus UI')),
                ('self_term', utils.fields.JSONField(blank=True, dump_kwargs={'ensure_ascii': False}, null=True, verbose_name='Self')),
                ('descendant', utils.fields.JSONField(blank=True, dump_kwargs={'ensure_ascii': False}, null=True, verbose_name='Descendants')),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'First Level Category',
                'verbose_name_plural': 'First Level Categories',
            },
        ),
        migrations.CreateModel(
            name='Descriptor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_time', models.DateTimeField(auto_now=True, null=True, verbose_name='updated')),
                ('thesaurus', models.SmallIntegerField(default=None, null=True, verbose_name='Thesaurus')),
                ('decs_code', models.CharField(blank=True, max_length=250, verbose_name='Thesaurus UI')),
                ('identifier', models.CharField(max_length=10, verbose_name='identifier')),
                ('type', models.CharField(blank=True, max_length=50, verbose_name='type')),
                ('active', models.BooleanField(default=False, verbose_name='Active')),
                ('label', utils.fields.JSONField(blank=True, dump_kwargs={'ensure_ascii': False}, null=True, verbose_name='Label')),
                ('treeNumber', utils.fields.JSONField(blank=True, null=True, verbose_name='Tree Number')),
                ('allowableQualifier', utils.fields.JSONField(blank=True, dump_kwargs={'ensure_ascii': False}, null=True, verbose_name='Allowable Qualifier')),
                ('concept', utils.fields.JSONField(blank=True, null=True, verbose_name='Concept')),
                ('preferredConcept', models.CharField(blank=True, max_length=150, null=True, verbose_name='Preferred Concept')),
                ('preferredTerm', models.CharField(blank=True, max_length=150, null=True, verbose_name='Preferred Term')),
                ('synonym', utils.fields.JSONField(blank=True, dump_kwargs={'ensure_ascii': False}, null=True, verbose_name='Synonym')),
                ('seeAlso', utils.fields.JSONField(blank=True, dump_kwargs={'ensure_ascii': False}, null=True, verbose_name='See Related')),
                ('pharmacologicalAction', utils.fields.JSONField(blank=True, dump_kwargs={'ensure_ascii': False}, null=True, verbose_name='Pharmacological Action')),
                ('annotation', utils.fields.JSONField(blank=True, dump_kwargs={'ensure_ascii': False}, null=True, verbose_name='Annotation')),
                ('considerAlso', utils.fields.JSONField(blank=True, dump_kwargs={'ensure_ascii': False}, null=True, verbose_name='Consider Also')),
                ('onlineNote', utils.fields.JSONField(blank=True, dump_kwargs={'ensure_ascii': False}, null=True, verbose_name='Online Note')),
                ('historyNote', utils.fields.JSONField(blank=True, dump_kwargs={'ensure_ascii': False}, null=True, verbose_name='History Note')),
                ('publicMeSHNote', utils.fields.JSONField(blank=True, dump_kwargs={'ensure_ascii': False}, null=True, verbose_name='Public MeSH Note')),
                ('previousIndexing', utils.fields.JSONField(blank=True, dump_kwargs={'ensure_ascii': False}, null=True, verbose_name='Previous Indexing')),
                ('scopeNote', utils.fields.JSONField(blank=True, dump_kwargs={'ensure_ascii': False}, null=True, verbose_name='Definition')),
                ('entryCombination', utils.fields.JSONField(blank=True, dump_kwargs={'ensure_ascii': False}, null=True, verbose_name='Entry Combination')),
                ('nlmClassificationNumber', models.CharField(blank=True, max_length=250, verbose_name='NLM classification number')),
                ('date_created', models.DateField(blank=True, help_text='DD/MM/YYYY', null=True, verbose_name='Date created')),
                ('date_revised', models.DateField(blank=True, help_text='DD/MM/YYYY', null=True, verbose_name='Date revised')),
                ('date_established', models.DateField(blank=True, help_text='DD/MM/YYYY', null=True, verbose_name='Date established')),
                ('created_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Full Descriptor',
                'verbose_name_plural': 'Full Descriptors',
            },
        ),
    ]
